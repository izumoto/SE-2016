#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SE.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Company")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeType(EmployeeType instance);
    partial void UpdateEmployeeType(EmployeeType instance);
    partial void DeleteEmployeeType(EmployeeType instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertStatusPay(StatusPay instance);
    partial void UpdateStatusPay(StatusPay instance);
    partial void DeleteStatusPay(StatusPay instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertTimeStart(TimeStart instance);
    partial void UpdateTimeStart(TimeStart instance);
    partial void DeleteTimeStart(TimeStart instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertVehicle(Vehicle instance);
    partial void UpdateVehicle(Vehicle instance);
    partial void DeleteVehicle(Vehicle instance);
    #endregion
		
		public DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CompanyConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeType> EmployeeTypes
		{
			get
			{
				return this.GetTable<EmployeeType>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<StatusPay> StatusPays
		{
			get
			{
				return this.GetTable<StatusPay>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<TimeStart> TimeStarts
		{
			get
			{
				return this.GetTable<TimeStart>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Vehicle> Vehicles
		{
			get
			{
				return this.GetTable<Vehicle>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCity;
		
		private string _nameCity;
		
		private EntitySet<Route> _Routes;
		
		private EntitySet<Route> _Routes1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCityChanging(int value);
    partial void OnidCityChanged();
    partial void OnnameCityChanging(string value);
    partial void OnnameCityChanged();
    #endregion
		
		public City()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Routes1 = new EntitySet<Route>(new Action<Route>(this.attach_Routes1), new Action<Route>(this.detach_Routes1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCity", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCity
		{
			get
			{
				return this._idCity;
			}
			set
			{
				if ((this._idCity != value))
				{
					this.OnidCityChanging(value);
					this.SendPropertyChanging();
					this._idCity = value;
					this.SendPropertyChanged("idCity");
					this.OnidCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameCity", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string nameCity
		{
			get
			{
				return this._nameCity;
			}
			set
			{
				if ((this._nameCity != value))
				{
					this.OnnameCityChanging(value);
					this.SendPropertyChanging();
					this._nameCity = value;
					this.SendPropertyChanged("nameCity");
					this.OnnameCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Route", Storage="_Routes", ThisKey="idCity", OtherKey="idFrom")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Route1", Storage="_Routes1", ThisKey="idCity", OtherKey="idTo")]
		public EntitySet<Route> Routes1
		{
			get
			{
				return this._Routes1;
			}
			set
			{
				this._Routes1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Routes1(Route entity)
		{
			this.SendPropertyChanging();
			entity.City1 = this;
		}
		
		private void detach_Routes1(Route entity)
		{
			this.SendPropertyChanging();
			entity.City1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCustomer;
		
		private string _name;
		
		private string _address;
		
		private string _phone;
		
		private string _idcard;
		
		private System.Nullable<bool> _sex;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCustomerChanging(int value);
    partial void OnidCustomerChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnidcardChanging(string value);
    partial void OnidcardChanged();
    partial void OnsexChanging(System.Nullable<bool> value);
    partial void OnsexChanged();
    #endregion
		
		public Customer()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCustomer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCustomer
		{
			get
			{
				return this._idCustomer;
			}
			set
			{
				if ((this._idCustomer != value))
				{
					this.OnidCustomerChanging(value);
					this.SendPropertyChanging();
					this._idCustomer = value;
					this.SendPropertyChanged("idCustomer");
					this.OnidCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcard", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string idcard
		{
			get
			{
				return this._idcard;
			}
			set
			{
				if ((this._idcard != value))
				{
					this.OnidcardChanging(value);
					this.SendPropertyChanging();
					this._idcard = value;
					this.SendPropertyChanged("idcard");
					this.OnidcardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="Bit")]
		public System.Nullable<bool> sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Ticket", Storage="_Tickets", ThisKey="idCustomer", OtherKey="idCustomer")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEmployee;
		
		private System.Nullable<int> _idTypeE;
		
		private string _username;
		
		private string _password;
		
		private string _name;
		
		private string _address;
		
		private string _phone;
		
		private string _idcard;
		
		private System.Nullable<bool> _sex;
		
		private System.Nullable<System.DateTime> _birthday;
		
		private System.Nullable<System.DateTime> _startday;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<EmployeeType> _EmployeeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmployeeChanging(int value);
    partial void OnidEmployeeChanged();
    partial void OnidTypeEChanging(System.Nullable<int> value);
    partial void OnidTypeEChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnidcardChanging(string value);
    partial void OnidcardChanged();
    partial void OnsexChanging(System.Nullable<bool> value);
    partial void OnsexChanged();
    partial void OnbirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthdayChanged();
    partial void OnstartdayChanging(System.Nullable<System.DateTime> value);
    partial void OnstartdayChanged();
    #endregion
		
		public Employee()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._EmployeeType = default(EntityRef<EmployeeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmployee", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTypeE", DbType="Int")]
		public System.Nullable<int> idTypeE
		{
			get
			{
				return this._idTypeE;
			}
			set
			{
				if ((this._idTypeE != value))
				{
					if (this._EmployeeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTypeEChanging(value);
					this.SendPropertyChanging();
					this._idTypeE = value;
					this.SendPropertyChanged("idTypeE");
					this.OnidTypeEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(15)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(32)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcard", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string idcard
		{
			get
			{
				return this._idcard;
			}
			set
			{
				if ((this._idcard != value))
				{
					this.OnidcardChanging(value);
					this.SendPropertyChanging();
					this._idcard = value;
					this.SendPropertyChanged("idcard");
					this.OnidcardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="Bit")]
		public System.Nullable<bool> sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="Date")]
		public System.Nullable<System.DateTime> birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startday", DbType="Date")]
		public System.Nullable<System.DateTime> startday
		{
			get
			{
				return this._startday;
			}
			set
			{
				if ((this._startday != value))
				{
					this.OnstartdayChanging(value);
					this.SendPropertyChanging();
					this._startday = value;
					this.SendPropertyChanged("startday");
					this.OnstartdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Schedule", Storage="_Schedules", ThisKey="idEmployee", OtherKey="idEmployee")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Ticket", Storage="_Tickets", ThisKey="idEmployee", OtherKey="idEmployee")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_EmployeeType", ThisKey="idTypeE", OtherKey="idTypeE", IsForeignKey=true)]
		public EmployeeType EmployeeType
		{
			get
			{
				return this._EmployeeType.Entity;
			}
			set
			{
				EmployeeType previousValue = this._EmployeeType.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeType.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._EmployeeType.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._idTypeE = value.idTypeE;
					}
					else
					{
						this._idTypeE = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmployeeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeType")]
	public partial class EmployeeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTypeE;
		
		private string _nameTypeE;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTypeEChanging(int value);
    partial void OnidTypeEChanged();
    partial void OnnameTypeEChanging(string value);
    partial void OnnameTypeEChanged();
    #endregion
		
		public EmployeeType()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTypeE", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTypeE
		{
			get
			{
				return this._idTypeE;
			}
			set
			{
				if ((this._idTypeE != value))
				{
					this.OnidTypeEChanging(value);
					this.SendPropertyChanging();
					this._idTypeE = value;
					this.SendPropertyChanged("idTypeE");
					this.OnidTypeEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameTypeE", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string nameTypeE
		{
			get
			{
				return this._nameTypeE;
			}
			set
			{
				if ((this._nameTypeE != value))
				{
					this.OnnameTypeEChanging(value);
					this.SendPropertyChanging();
					this._nameTypeE = value;
					this.SendPropertyChanged("nameTypeE");
					this.OnnameTypeEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_Employees", ThisKey="idTypeE", OtherKey="idTypeE")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idRoute;
		
		private System.Nullable<int> _idFrom;
		
		private System.Nullable<int> _idTo;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntityRef<City> _City;
		
		private EntityRef<City> _City1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRouteChanging(int value);
    partial void OnidRouteChanged();
    partial void OnidFromChanging(System.Nullable<int> value);
    partial void OnidFromChanged();
    partial void OnidToChanging(System.Nullable<int> value);
    partial void OnidToChanged();
    #endregion
		
		public Route()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._City = default(EntityRef<City>);
			this._City1 = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRoute", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idRoute
		{
			get
			{
				return this._idRoute;
			}
			set
			{
				if ((this._idRoute != value))
				{
					this.OnidRouteChanging(value);
					this.SendPropertyChanging();
					this._idRoute = value;
					this.SendPropertyChanged("idRoute");
					this.OnidRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFrom", DbType="Int")]
		public System.Nullable<int> idFrom
		{
			get
			{
				return this._idFrom;
			}
			set
			{
				if ((this._idFrom != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFromChanging(value);
					this.SendPropertyChanging();
					this._idFrom = value;
					this.SendPropertyChanged("idFrom");
					this.OnidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTo", DbType="Int")]
		public System.Nullable<int> idTo
		{
			get
			{
				return this._idTo;
			}
			set
			{
				if ((this._idTo != value))
				{
					if (this._City1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidToChanging(value);
					this.SendPropertyChanging();
					this._idTo = value;
					this.SendPropertyChanged("idTo");
					this.OnidToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Schedule", Storage="_Schedules", ThisKey="idRoute", OtherKey="idRoute")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Route", Storage="_City", ThisKey="idFrom", OtherKey="idCity", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._idFrom = value.idCity;
					}
					else
					{
						this._idFrom = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Route1", Storage="_City1", ThisKey="idTo", OtherKey="idCity", IsForeignKey=true)]
		public City City1
		{
			get
			{
				return this._City1.Entity;
			}
			set
			{
				City previousValue = this._City1.Entity;
				if (((previousValue != value) 
							|| (this._City1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City1.Entity = null;
						previousValue.Routes1.Remove(this);
					}
					this._City1.Entity = value;
					if ((value != null))
					{
						value.Routes1.Add(this);
						this._idTo = value.idCity;
					}
					else
					{
						this._idTo = default(Nullable<int>);
					}
					this.SendPropertyChanged("City1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusPay")]
	public partial class StatusPay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStatus;
		
		private string _nameStatus;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStatusChanging(int value);
    partial void OnidStatusChanged();
    partial void OnnameStatusChanging(string value);
    partial void OnnameStatusChanged();
    #endregion
		
		public StatusPay()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStatus", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idStatus
		{
			get
			{
				return this._idStatus;
			}
			set
			{
				if ((this._idStatus != value))
				{
					this.OnidStatusChanging(value);
					this.SendPropertyChanging();
					this._idStatus = value;
					this.SendPropertyChanged("idStatus");
					this.OnidStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameStatus", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string nameStatus
		{
			get
			{
				return this._nameStatus;
			}
			set
			{
				if ((this._nameStatus != value))
				{
					this.OnnameStatusChanging(value);
					this.SendPropertyChanging();
					this._nameStatus = value;
					this.SendPropertyChanged("nameStatus");
					this.OnnameStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusPay_Ticket", Storage="_Tickets", ThisKey="idStatus", OtherKey="idStatus")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.StatusPay = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.StatusPay = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSchedule;
		
		private System.Nullable<System.DateTime> _dayStart;
		
		private System.Nullable<System.DateTime> _dayEnd;
		
		private System.Nullable<int> _idRoute;
		
		private System.Nullable<int> _idTime;
		
		private System.Nullable<int> _idEmployee;
		
		private System.Nullable<int> _idVehicle;
		
		private System.Nullable<decimal> _price;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<TimeStart> _TimeStart;
		
		private EntityRef<Vehicle> _Vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidScheduleChanging(int value);
    partial void OnidScheduleChanged();
    partial void OndayStartChanging(System.Nullable<System.DateTime> value);
    partial void OndayStartChanged();
    partial void OndayEndChanging(System.Nullable<System.DateTime> value);
    partial void OndayEndChanged();
    partial void OnidRouteChanging(System.Nullable<int> value);
    partial void OnidRouteChanged();
    partial void OnidTimeChanging(System.Nullable<int> value);
    partial void OnidTimeChanged();
    partial void OnidEmployeeChanging(System.Nullable<int> value);
    partial void OnidEmployeeChanged();
    partial void OnidVehicleChanging(System.Nullable<int> value);
    partial void OnidVehicleChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    #endregion
		
		public Schedule()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Employee = default(EntityRef<Employee>);
			this._Route = default(EntityRef<Route>);
			this._TimeStart = default(EntityRef<TimeStart>);
			this._Vehicle = default(EntityRef<Vehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSchedule", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idSchedule
		{
			get
			{
				return this._idSchedule;
			}
			set
			{
				if ((this._idSchedule != value))
				{
					this.OnidScheduleChanging(value);
					this.SendPropertyChanging();
					this._idSchedule = value;
					this.SendPropertyChanged("idSchedule");
					this.OnidScheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayStart", DbType="Date")]
		public System.Nullable<System.DateTime> dayStart
		{
			get
			{
				return this._dayStart;
			}
			set
			{
				if ((this._dayStart != value))
				{
					this.OndayStartChanging(value);
					this.SendPropertyChanging();
					this._dayStart = value;
					this.SendPropertyChanged("dayStart");
					this.OndayStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayEnd", DbType="Date")]
		public System.Nullable<System.DateTime> dayEnd
		{
			get
			{
				return this._dayEnd;
			}
			set
			{
				if ((this._dayEnd != value))
				{
					this.OndayEndChanging(value);
					this.SendPropertyChanging();
					this._dayEnd = value;
					this.SendPropertyChanged("dayEnd");
					this.OndayEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRoute", DbType="Int")]
		public System.Nullable<int> idRoute
		{
			get
			{
				return this._idRoute;
			}
			set
			{
				if ((this._idRoute != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRouteChanging(value);
					this.SendPropertyChanging();
					this._idRoute = value;
					this.SendPropertyChanged("idRoute");
					this.OnidRouteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTime", DbType="Int")]
		public System.Nullable<int> idTime
		{
			get
			{
				return this._idTime;
			}
			set
			{
				if ((this._idTime != value))
				{
					if (this._TimeStart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTimeChanging(value);
					this.SendPropertyChanging();
					this._idTime = value;
					this.SendPropertyChanged("idTime");
					this.OnidTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmployee", DbType="Int")]
		public System.Nullable<int> idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVehicle", DbType="Int")]
		public System.Nullable<int> idVehicle
		{
			get
			{
				return this._idVehicle;
			}
			set
			{
				if ((this._idVehicle != value))
				{
					if (this._Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidVehicleChanging(value);
					this.SendPropertyChanging();
					this._idVehicle = value;
					this.SendPropertyChanged("idVehicle");
					this.OnidVehicleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Ticket", Storage="_Tickets", ThisKey="idSchedule", OtherKey="idSchedule")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Schedule", Storage="_Employee", ThisKey="idEmployee", OtherKey="idEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._idEmployee = value.idEmployee;
					}
					else
					{
						this._idEmployee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Schedule", Storage="_Route", ThisKey="idRoute", OtherKey="idRoute", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._idRoute = value.idRoute;
					}
					else
					{
						this._idRoute = default(Nullable<int>);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeStart_Schedule", Storage="_TimeStart", ThisKey="idTime", OtherKey="idTime", IsForeignKey=true)]
		public TimeStart TimeStart
		{
			get
			{
				return this._TimeStart.Entity;
			}
			set
			{
				TimeStart previousValue = this._TimeStart.Entity;
				if (((previousValue != value) 
							|| (this._TimeStart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeStart.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._TimeStart.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._idTime = value.idTime;
					}
					else
					{
						this._idTime = default(Nullable<int>);
					}
					this.SendPropertyChanged("TimeStart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_Schedule", Storage="_Vehicle", ThisKey="idVehicle", OtherKey="idVehicle", IsForeignKey=true)]
		public Vehicle Vehicle
		{
			get
			{
				return this._Vehicle.Entity;
			}
			set
			{
				Vehicle previousValue = this._Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vehicle.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Vehicle.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._idVehicle = value.idVehicle;
					}
					else
					{
						this._idVehicle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeStart")]
	public partial class TimeStart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTime;
		
		private System.Nullable<System.TimeSpan> _time;
		
		private EntitySet<Schedule> _Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTimeChanging(int value);
    partial void OnidTimeChanged();
    partial void OntimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OntimeChanged();
    #endregion
		
		public TimeStart()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTime", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTime
		{
			get
			{
				return this._idTime;
			}
			set
			{
				if ((this._idTime != value))
				{
					this.OnidTimeChanging(value);
					this.SendPropertyChanging();
					this._idTime = value;
					this.SendPropertyChanged("idTime");
					this.OnidTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeStart_Schedule", Storage="_Schedules", ThisKey="idTime", OtherKey="idTime")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.TimeStart = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.TimeStart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTicket;
		
		private System.Nullable<int> _idCustomer;
		
		private System.Nullable<int> _idStatus;
		
		private System.Nullable<int> _idSit;
		
		private System.Nullable<int> _idSchedule;
		
		private System.Nullable<int> _idEmployee;
		
		private System.Nullable<System.DateTime> _dateCreate;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<StatusPay> _StatusPay;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTicketChanging(int value);
    partial void OnidTicketChanged();
    partial void OnidCustomerChanging(System.Nullable<int> value);
    partial void OnidCustomerChanged();
    partial void OnidStatusChanging(System.Nullable<int> value);
    partial void OnidStatusChanged();
    partial void OnidSitChanging(System.Nullable<int> value);
    partial void OnidSitChanged();
    partial void OnidScheduleChanging(System.Nullable<int> value);
    partial void OnidScheduleChanged();
    partial void OnidEmployeeChanging(System.Nullable<int> value);
    partial void OnidEmployeeChanged();
    partial void OndateCreateChanging(System.Nullable<System.DateTime> value);
    partial void OndateCreateChanged();
    #endregion
		
		public Ticket()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			this._Schedule = default(EntityRef<Schedule>);
			this._StatusPay = default(EntityRef<StatusPay>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTicket", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTicket
		{
			get
			{
				return this._idTicket;
			}
			set
			{
				if ((this._idTicket != value))
				{
					this.OnidTicketChanging(value);
					this.SendPropertyChanging();
					this._idTicket = value;
					this.SendPropertyChanged("idTicket");
					this.OnidTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCustomer", DbType="Int")]
		public System.Nullable<int> idCustomer
		{
			get
			{
				return this._idCustomer;
			}
			set
			{
				if ((this._idCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCustomerChanging(value);
					this.SendPropertyChanging();
					this._idCustomer = value;
					this.SendPropertyChanged("idCustomer");
					this.OnidCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStatus", DbType="Int")]
		public System.Nullable<int> idStatus
		{
			get
			{
				return this._idStatus;
			}
			set
			{
				if ((this._idStatus != value))
				{
					if (this._StatusPay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStatusChanging(value);
					this.SendPropertyChanging();
					this._idStatus = value;
					this.SendPropertyChanged("idStatus");
					this.OnidStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSit", DbType="Int")]
		public System.Nullable<int> idSit
		{
			get
			{
				return this._idSit;
			}
			set
			{
				if ((this._idSit != value))
				{
					this.OnidSitChanging(value);
					this.SendPropertyChanging();
					this._idSit = value;
					this.SendPropertyChanged("idSit");
					this.OnidSitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSchedule", DbType="Int")]
		public System.Nullable<int> idSchedule
		{
			get
			{
				return this._idSchedule;
			}
			set
			{
				if ((this._idSchedule != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidScheduleChanging(value);
					this.SendPropertyChanging();
					this._idSchedule = value;
					this.SendPropertyChanged("idSchedule");
					this.OnidScheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmployee", DbType="Int")]
		public System.Nullable<int> idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCreate", DbType="Date")]
		public System.Nullable<System.DateTime> dateCreate
		{
			get
			{
				return this._dateCreate;
			}
			set
			{
				if ((this._dateCreate != value))
				{
					this.OndateCreateChanging(value);
					this.SendPropertyChanging();
					this._dateCreate = value;
					this.SendPropertyChanged("dateCreate");
					this.OndateCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Ticket", Storage="_Customer", ThisKey="idCustomer", OtherKey="idCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._idCustomer = value.idCustomer;
					}
					else
					{
						this._idCustomer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Ticket", Storage="_Employee", ThisKey="idEmployee", OtherKey="idEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._idEmployee = value.idEmployee;
					}
					else
					{
						this._idEmployee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Ticket", Storage="_Schedule", ThisKey="idSchedule", OtherKey="idSchedule", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._idSchedule = value.idSchedule;
					}
					else
					{
						this._idSchedule = default(Nullable<int>);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusPay_Ticket", Storage="_StatusPay", ThisKey="idStatus", OtherKey="idStatus", IsForeignKey=true)]
		public StatusPay StatusPay
		{
			get
			{
				return this._StatusPay.Entity;
			}
			set
			{
				StatusPay previousValue = this._StatusPay.Entity;
				if (((previousValue != value) 
							|| (this._StatusPay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusPay.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._StatusPay.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._idStatus = value.idStatus;
					}
					else
					{
						this._idStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("StatusPay");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vehicle")]
	public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVehicle;
		
		private string _license;
		
		private System.Nullable<System.DateTime> _dayImport;
		
		private EntitySet<Schedule> _Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVehicleChanging(int value);
    partial void OnidVehicleChanged();
    partial void OnlicenseChanging(string value);
    partial void OnlicenseChanged();
    partial void OndayImportChanging(System.Nullable<System.DateTime> value);
    partial void OndayImportChanged();
    #endregion
		
		public Vehicle()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVehicle", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVehicle
		{
			get
			{
				return this._idVehicle;
			}
			set
			{
				if ((this._idVehicle != value))
				{
					this.OnidVehicleChanging(value);
					this.SendPropertyChanging();
					this._idVehicle = value;
					this.SendPropertyChanged("idVehicle");
					this.OnidVehicleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_license", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string license
		{
			get
			{
				return this._license;
			}
			set
			{
				if ((this._license != value))
				{
					this.OnlicenseChanging(value);
					this.SendPropertyChanging();
					this._license = value;
					this.SendPropertyChanged("license");
					this.OnlicenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayImport", DbType="Date")]
		public System.Nullable<System.DateTime> dayImport
		{
			get
			{
				return this._dayImport;
			}
			set
			{
				if ((this._dayImport != value))
				{
					this.OndayImportChanging(value);
					this.SendPropertyChanging();
					this._dayImport = value;
					this.SendPropertyChanged("dayImport");
					this.OndayImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_Schedule", Storage="_Schedules", ThisKey="idVehicle", OtherKey="idVehicle")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = null;
		}
	}
}
#pragma warning restore 1591
